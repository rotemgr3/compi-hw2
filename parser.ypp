%{
    #include <stdio.h>
    #include <iostream>
    #include "output.hpp"
    using namespace output;
    extern int yylineno;
    extern int yylex();
    int yyerror(const char*);
%}

    %token VOID INT BYTE B BOOL OVERRIDE TRUE FALSE RETURN IF WHILE BREAK CONTINUE SC COMMA ID NUM STRING

    %right ASSIGN
    %left OR
    %left AND
    %left RELOP
    %left PLUS MINUS
    %left MULT DIV
    %right NOT
    %left LPAREN RPAREN LBRACE RBRACE
    %right ELSE

%%

Program: Funcs                                                                  {printProductionRule(1);}
Funcs: /*epsilon*/                                                              {printProductionRule(2);}                                                                
Funcs: FuncDecl Funcs                                                           {printProductionRule(3);}                                           
FuncDecl: OverRide RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE    {printProductionRule(4);}
OverRide: /*epsilon*/                                                           {printProductionRule(5);}                                                       
OverRide: OVERRIDE                                                              {printProductionRule(6);}
RetType: Type                                                                   {printProductionRule(7);}
RetType:  VOID                                                                  {printProductionRule(8);}                                                        
Formals: /*epsilon*/                                                            {printProductionRule(9);}
Formals: FormalsList                                                            {printProductionRule(10);}
FormalsList: FormalDecl                                                         {printProductionRule(11);}
FormalsList: FormalDecl COMMA FormalsList                                       {printProductionRule(12);}
FormalDecl: Type ID                                                             {printProductionRule(13);}
Statements: Statement                                                           {printProductionRule(14);}
Statements: Statements Statement                                                {printProductionRule(15);}
Statement: LBRACE Statements RBRACE                                             {printProductionRule(16);}
Statement: Type ID SC                                                           {printProductionRule(17);}
Statement: Type ID ASSIGN Exp SC                                                {printProductionRule(18);}
Statement: ID ASSIGN Exp SC                                                     {printProductionRule(19);}
Statement: Call SC                                                              {printProductionRule(20);}
Statement: RETURN SC                                                            {printProductionRule(21);}
Statement: RETURN Exp SC                                                        {printProductionRule(22);}
Statement: IF LPAREN Exp RPAREN Statement                                       {printProductionRule(23);}
Statement: IF LPAREN Exp RPAREN Statement ELSE Statement                        {printProductionRule(24);}
Statement: WHILE LPAREN Exp RPAREN Statement                                    {printProductionRule(25);}
Statement: BREAK SC                                                             {printProductionRule(26);}
Statement: CONTINUE SC                                                          {printProductionRule(27);}
Call: ID LPAREN ExpList RPAREN                                                  {printProductionRule(28);}
Call: ID LPAREN RPAREN                                                          {printProductionRule(29);}
ExpList: Exp                                                                    {printProductionRule(30);}
ExpList: Exp COMMA ExpList                                                      {printProductionRule(31);}
Type: INT                                                                       {printProductionRule(32);}
Type: BYTE                                                                      {printProductionRule(33);}
Type: BOOL                                                                      {printProductionRule(34);}
Exp: LPAREN Exp RPAREN                                                          {printProductionRule(35);}
Exp: Exp PLUS Exp                                                               {printProductionRule(36);}
Exp: Exp MINUS Exp                                                              {printProductionRule(36);}
Exp: Exp MULT Exp                                                               {printProductionRule(36);}
Exp: Exp DIV Exp                                                                {printProductionRule(36);}
Exp: ID                                                                         {printProductionRule(37);}
Exp: Call                                                                       {printProductionRule(38);}
Exp: NUM                                                                        {printProductionRule(39);}
Exp: NUM B                                                                      {printProductionRule(40);}
Exp: STRING                                                                     {printProductionRule(41);}
Exp: TRUE                                                                       {printProductionRule(42);}
Exp: FALSE                                                                      {printProductionRule(43);}
Exp: NOT Exp                                                                    {printProductionRule(44);}                                                      
Exp: Exp AND Exp                                                                {printProductionRule(45);}
Exp: Exp OR Exp                                                                 {printProductionRule(46);}
Exp: Exp RELOP Exp                                                              {printProductionRule(47);}
Exp: LPAREN Type RPAREN Exp                                                     {printProductionRule(48);}

%%

int yyerror(const char* message) {
	errorSyn(yylineno);
	exit(0);
}

int main() {
    return yyparse();
}
